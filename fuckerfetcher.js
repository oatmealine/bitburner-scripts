const ghPrefix = 'https://raw.githubusercontent.com/oatmealine/bitburner-scripts/main/';

/** @param {NS} ns **/
export async function main(ns) {
	ns.tprint('fuckerfetcher.js v1.02 by Jill "oatmealine" Monoids');

	ns.tprint('fetching modules.json, please wait...');
	let modules;
	const dlSuccess = await ns.wget(ghPrefix + 'modules.json', '_modules.txt');
	if (!dlSuccess) throw new Error('failed to download modules.json! no internet connection?');

	const modulesRaw = ns.read('_modules.txt');
	if (!modulesRaw || modulesRaw === '') throw new Error('failed to download modules.json (empty file)! no internet connection?');

	modules = JSON.parse(modulesRaw);
	ns.rm('_modules.txt');

	let firstModule = true;
	let totalram = 1.60;
	let downloaded = [];
	for (const module of modules) {
		let str = `do you want to download ${module.name}? this module will use up ${module.ram.toLocaleString()}GB of ram.`;

		str = `current predicted ram usage of fuckerdaemon: ${totalram.toLocaleString()}GB/${ns.getServerMaxRam('home')}GB\n` + str;
		if (firstModule) {
			str = 'welcome to the fucker suite installer!\n' + str;
		}

		let download = await ns.prompt(str);
		if (download) {
			const filename = module.name + '.js';
			ns.tprint(`downloading ${filename}...`);

			const dlSuccess = await ns.wget(ghPrefix + filename, filename);
			if (!dlSuccess) throw new Error('failed to download modules.json! no internet connection?');

			totalram += module.ram;
			downloaded.push(module);

			ns.tprint(`downloaded ${filename} (${ns.read(filename).length}B)`);
		}

		firstModule = false;
	}

	if (downloaded.length === 0) {
		ns.tprint('no modules added, exiting');
		return;
	}

	ns.tprint(`downloaded ${downloaded.length} modules, writing config...`);

	const configData = `// autogenerated by fuckerfetcher.js
${downloaded.map(module => {
	let hooks = [];
	if (module.loadLoop) hooks.push(['loop', module.variablePrefix + 'Loop']);
	if (module.loadInitialize) hooks.push(['initialize', module.variablePrefix + 'Init']);
	return `import { ${hooks.map(h => h[0] + ' as ' + h[1]).join(', ')} } from './${module.name}.js'`;
}).join('\n\n')}

export const fuckers = ${JSON.stringify(downloaded.map(module => {
	let obj = {name: module.name, prefix: module.prefix};
	if (module.loadLoop) obj.loop = '$' + module.variablePrefix + 'Loop' + '$';
	if (module.loadInitialize) obj.init = '$' + module.variablePrefix + 'Init' + '$';
	return obj;
})).replaceAll('"$','').replaceAll('$"','')}`;

	await ns.write('config.js', configData, 'w');

	ns.tprint('downloading fuckerdaemon.js...');
	await ns.wget(ghPrefix + 'fuckerdaemon.js', 'fuckerdaemon.js');
	ns.tprint('done! you can now run fuckerdaemon.js with "run fuckerdaemon.js"');
}
